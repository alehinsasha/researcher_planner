
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ДобавитьРеквизитИЭлементУправленияПланировщика();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	ПериодПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантПоложенияШкалыВремениПриИзменении(Элемент)

	ОбновитьПланировщик(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОтображенияВремениЭлементовПланировщикаПриИзменении(Элемент)

	ОбновитьПланировщик(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаПериодическогоВариантаПриИзменении(Элемент)

	ОбновитьПланировщик(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура КратностьПериодическогоВариантаРегулирование(Элемент, Направление, СтандартнаяОбработка)

	ОбновитьПланировщик(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьПеренесенныеЗаголовкиПриИзменении(Элемент)

	ОбновитьПланировщик(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьТекущуюДатуПриИзменении(Элемент)

	ОбновитьПланировщик(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьПеренесенныеЗаголовкиШкалыВремениПриИзменении(Элемент)

	ОбновитьПланировщик(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыравниватьГраницыЭлементовПоШкалеВремениПриИзменении(Элемент)

	ОбновитьПланировщик(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ТекущиеПериодыОтображения

&НаКлиенте
Процедура ТекущиеПериодыОтображенияДатаНачалаПриИзменении(Элемент)

	ОбновитьПланировщик(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущиеПериодыОтображенияДатаОкончанияПриИзменении(Элемент)

	ОбновитьПланировщик(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ЭлементыШкалыВремени

&НаКлиенте
Процедура ЭлементыШкалыВремениЕдиницаПриИзменении(Элемент)

	ОбновитьПланировщик(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлементыШкалыВремениКратностьПриИзменении(Элемент)

	ОбновитьПланировщик(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлементыШкалыВремениФорматПриИзменении(Элемент)

	ОбновитьПланировщик(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлементыШкалыВремениФорматНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ТекущиеДанные = Элементы.ЭлементыШкалыВремени.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ФорматнаяСтрока = Новый КонструкторФорматнойСтроки;
	
	ФорматнаяСтрока.ДоступныеТипы = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ФорматнаяСтрока.Текст = ТекущиеДанные.Формат;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеИзмененияФорматаЭлементаШкалыВремени", ЭтаФорма, ТекущиеДанные);
	ФорматнаяСтрока.Показать(ОписаниеОповещения);

КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ДеревоИзмерений

&НаКлиенте
Процедура ЭлементыШкалыВремениПриИзменении(Элемент)

	ОбновитьПланировщик(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоИзмеренийЗначениеПриИзменении(Элемент)
	
	ОбновитьВыпадающиеСпискиИзмеренийИЭлементов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ДанныеПланировщика

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьПланировщик(Команда)

	Если ИнициализироватьПланировщикНаСервере() Тогда
		ЗаполнитьПланировщик();	
	КонецЕсли;		

КонецПроцедуры

&НаКлиенте
Процедура СкрытьПоказатьНастройки(Команда)

	НовоеЗначение = Не Элементы.ГруппаНастройки.Видимость;
	
	Элементы.ГруппаНастройки.Видимость = НовоеЗначение;
	Элементы.ФормаСкрытьПоказатьНастройки.Пометка = НовоеЗначение;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзмерение(Команда)
	
	НоваяСтрока = ДеревоИзмерений.ПолучитьЭлементы().Добавить();
	НоваяСтрока.ВидЗначенияДереваИзмерений = ВидыЗначенийДереваИзмерений().Измерение;
	
	Элементы.ДеревоИзмерений.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭлементИзмерения(Команда)
	
	ТекущиеДанные = Элементы.ДеревоИзмерений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущееИзмерение = ТекущиеДанные.ПолучитьРодителя();
	Если ТекущееИзмерение = Неопределено Тогда
		НоваяСтрока = ТекущиеДанные.ПолучитьЭлементы().Добавить();	
	Иначе
		НоваяСтрока = ТекущееИзмерение.ПолучитьЭлементы().Добавить();	
	КонецЕсли;
	НоваяСтрока.ВидЗначенияДереваИзмерений = ВидыЗначенийДереваИзмерений().ЭлементИзмерения;
	
	Элементы.ДеревоИзмерений.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭлементПланировщика(Команда)

	НоваяСтрока = ДанныеПланировщика.ПолучитьЭлементы().Добавить();
	НоваяСтрока.ЭтоДанные = Истина;
	Элементы.ДанныеПланировщика.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();

КонецПроцедуры

&НаКлиенте
Процедура ПривязатьЭлементПланировщикаКИзмерению(Команда)

	ТекущиеДанные = Элементы.ДанныеПланировщика.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийЭлементПланировщика = ТекущиеДанные.ПолучитьРодителя();
	Если ТекущийЭлементПланировщика = Неопределено Тогда
		НоваяСтрока = ТекущиеДанные.ПолучитьЭлементы().Добавить();	

		Элементы.ДанныеПланировщика.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	Иначе
		НоваяСтрока = ТекущийЭлементПланировщика.ПолучитьЭлементы().Добавить();	

		Элементы.ДанныеПланировщика.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


&НаКлиенте
Процедура ПослеИзмененияФорматаЭлементаШкалыВремени(Текст, ТекущиеДанные) Экспорт
	
	ТекущиеДанные.Формат = Текст;
	ОбновитьПланировщик(Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ПериодПриИзмененииНаСервере()

	ТекущиеПериодыОтображенияНаСервере = РеквизитФормыВЗначение("ТекущиеПериодыОтображения");
	ТекущиеПериодыОтображенияНаСервере.Очистить();
	
	ТекущаяДата = НачалоДня(Период.ДатаНачала);
	КраяняяДата = НачалоДня(Период.ДатаОкончания);
	
	Пока ТекущаяДата <= КраяняяДата Цикл
		НоваяСтрока = ТекущиеПериодыОтображенияНаСервере.Добавить();
		
		НоваяСтрока.ДатаНачала = НачалоДня(ТекущаяДата);
		НоваяСтрока.ДатаОкончания = КонецДня(ТекущаяДата);
		
		ТекущаяДата = ТекущаяДата + 86400;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТекущиеПериодыОтображенияНаСервере, "ТекущиеПериодыОтображения");

КонецПроцедуры

&НаСервере
Функция ИнициализироватьПланировщикНаСервере()

	Результат = Истина;
	
	Если ПроверитьЗаполнение() Тогда
		ЗаполнитьОсновныеНастройки();
		ЗаполнитьТекущиеПериодыОтображения();
		ПерезаполнитьЭлементыШкалыВремени();
		ОпределитьИзмерения();	
	Иначе
		Результат = Ложь;	
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаСервере
Процедура ЗаполнитьОсновныеНастройки() 

	Планировщик = ЭтотОбъект.Планировщик;
	Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени[ВариантПоложенияШкалыВремени];
	Планировщик.ОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика[ВариантОтображенияВремениЭлементовПланировщика];
	Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени[ЕдиницаПериодическогоВарианта];
	Планировщик.КратностьПериодическогоВарианта = КратностьПериодическогоВарианта;
	Планировщик.ОтображатьПеренесенныеЗаголовки = ОтображатьПеренесенныеЗаголовки;
	Планировщик.ОтображатьПеренесенныеЗаголовкиШкалыВремени = ОтображатьПеренесенныеЗаголовкиШкалыВремени;
	Планировщик.НачалоПериодаОтображения = Период.ДатаНачала;
	Планировщик.КонецПериодаОтображения = Период.ДатаОкончания;
	Планировщик.ОтображатьТекущуюДату = ОтображатьТекущуюДату;
	Планировщик.ВыравниватьГраницыЭлементовПоШкалеВремени = ВыравниватьГраницыЭлементовПоШкалеВремени;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТекущиеПериодыОтображения() 
	
	Планировщик = ЭтотОбъект.Планировщик;
	Планировщик.ТекущиеПериодыОтображения.Очистить();
	Для Каждого Строка Из ТекущиеПериодыОтображения Цикл
		Планировщик.ТекущиеПериодыОтображения.Добавить(Строка.ДатаНачала, Строка.ДатаОкончания);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьЭлементыШкалыВремени() 
	
	УдалитьЭлементыШкалыВремени();
	
	Для Каждого Строка Из ЭлементыШкалыВремени Цикл
		Если Ложь
			Или ПустаяСтрока(Строка.Единица)
			Или Строка.Кратность = 0
			Или Строка.Кратность < 0
			Тогда
			
			Продолжить;			
		КонецЕсли;

		Планировщик = ЭтотОбъект.Планировщик;
		ЭлементШкалыВремени = Планировщик.ШкалаВремени.Элементы.Добавить();
		
		ЭлементШкалыВремени.Единица = ТипЕдиницыШкалыВремени[Строка.Единица];
		ЭлементШкалыВремени.Кратность = Строка.Кратность;
		ЭлементШкалыВремени.Формат = Строка.Формат;
		ЭлементШкалыВремени.ОтображатьПериодическиеМетки = Истина;
	КонецЦикла;
	
	Планировщик = ЭтотОбъект.Планировщик;
	Планировщик.ШкалаВремени.Элементы.Удалить(Планировщик.ШкалаВремени.Элементы[0]);	

КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементыШкалыВремени() 

	Планировщик = ЭтотОбъект.Планировщик;
	КоличествоЭлементовВШкалеВремени = Планировщик.ШкалаВремени.Элементы.Количество();
	Для Счетчик = 0 По КоличествоЭлементовВШкалеВремени Цикл
		Планировщик.ШкалаВремени.Элементы.Удалить(Планировщик.ШкалаВремени.Элементы[0]);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОпределитьИзмерения() 

	Дерево = РеквизитФормыВЗначение("ДеревоИзмерений");
	
	Планировщик = ЭтотОбъект.Планировщик;
	Планировщик.Измерения.Очистить();
	Для Каждого СтрокаИзмерение Из Дерево.Строки Цикл
		Измерение = Планировщик.Измерения.Добавить(СтрокаИзмерение.Значение);
		
		Для Каждого СтрокаЭлемент Из СтрокаИзмерение.Строки Цикл
			Измерение.Элементы.Добавить(СтрокаЭлемент.Значение);
		КонецЦикла;		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПланировщик()

	Планировщик = ЭтотОбъект.Планировщик;
	Планировщик.Элементы.Очистить();
	
	ДанныеЭлементовПланировщика = ДанныеПланировщика.ПолучитьЭлементы();
	Для Каждого ДанныеЭлементаПланировщика Из ДанныеЭлементовПланировщика Цикл
		НовыйЭлементПланировщика = Планировщик.Элементы.Добавить(ДанныеЭлементаПланировщика.Начало, ДанныеЭлементаПланировщика.Конец);
		НовыйЭлементПланировщика.Текст = ДанныеЭлементаПланировщика.Текст;
		
		Измерения = Новый Соответствие;
		
		ПривязкиКИзмерениям = ДанныеЭлементаПланировщика.ПолучитьЭлементы();
		Для Каждого ПривязкаКИзмерению Из ПривязкиКИзмерениям Цикл
			Измерения.Вставить(ПривязкаКИзмерению.Измерение, ПривязкаКИзмерению.ЭлементИзмерения);
		КонецЦикла;
		
		НовыйЭлементПланировщика.ЗначенияИзмерений = Новый ФиксированноеСоответствие(Измерения);	
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ДобавитьРеквизитИЭлементУправленияПланировщика()
	
	// Добавляю реквизит
	ДобавляемыеРеквизиты = Новый Массив();
	
	ТипПланировщик = Новый ОписаниеТипов("Планировщик");
	
	НовыйРеквизит = Новый РеквизитФормы("Планировщик", ТипПланировщик);
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	// Добавляю элемент управления
	НовыйЭлемент = Элементы.Добавить("Планировщик", Тип("ПолеФормы"), Элементы.ГруппаПланировщик);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеПланировщика;
	НовыйЭлемент.ПутьКДанным = "Планировщик";
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	
КонецПроцедуры

&НаКлиенте
Функция ВидыЗначенийДереваИзмерений()
	
	Результат = Новый Структура();
	Результат.Вставить("Измерение", "Измерение");
	Результат.Вставить("ЭлементИзмерения", "ЭлементИзмерения");
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьВыпадающиеСпискиИзмеренийИЭлементов()

	ДанныеСтроки = Элементы.ДеревоИзмерений.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийСписок = Неопределено;
	Если ДанныеСтроки.ВидЗначенияДереваИзмерений = ВидыЗначенийДереваИзмерений().Измерение Тогда
		ТекущийСписок = Элементы.ДанныеПланировщикаИзмерение.СписокВыбора;
	ИначеЕсли ДанныеСтроки.ВидЗначенияДереваИзмерений = ВидыЗначенийДереваИзмерений().ЭлементИзмерения Тогда
		ТекущийСписок = Элементы.ДанныеПланировщикаЭлементИзмерения.СписокВыбора;
	Иначе 
		ВызватьИсключение "Не обрабатываемый вид значения дерева измерений";
	КонецЕсли;
	
	Если ТекущийСписок = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущееЗначение = ДанныеСтроки.Значение;
	Если Не ЗначениеЗаполнено(ТекущееЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущийСписок.НайтиПоЗначению(ТекущееЗначение) = Неопределено Тогда
		ТекущийСписок.Добавить(ТекущееЗначение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
